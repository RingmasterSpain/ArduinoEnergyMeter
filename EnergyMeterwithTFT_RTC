/*
 * ARCHIVO: Monitorización DDS238-1
 *   AUTOR: David Losada
 *   FECHA: 25/11/2015
  *        URL: http://miqueridopinwino.blogspot.com/monta-tu-propio-monitor-de-energia-por-30-eurillos.html
 *
 * OBJETIVO: Prototipo para comprobar consumos s/horarios
 * Cálculo TDH en invierno; en verano es 13 a 23h http://nergiza.com/tarifa-nocturna-sigue-existiendo-es-rentable/
 * TODO: Tener en cuenta si es verano o invierno (configurado para invierno)
 * Configurado para el medidor de KWh DDS238-1: Da un pulso cada Vatio/h (1000 pulsos/KWh)
 * (Cambiar las variables del inicio para que funcione con el que uses).
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 */

// IMPORTANT: Adafruit_TFTLCD LIBRARY MUST BE SPECIFICALLY
// CONFIGURED FOR EITHER THE TFT SHIELD OR THE BREAKOUT BOARD.
// SEE RELEVANT COMMENTS IN Adafruit_TFTLCD.h FOR SETUP.

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_TFTLCD.h> // Hardware-specific library
#include <EEPROM.h> //Para usar la memoria EEPROM
//Arduino con Tiny RTC I2C http://zygzax.com
#include <Wire.h>
#include <DS1307RTC.h>
#include <Time.h> //Manejo reloj interno Arduino

// The control pins for the LCD can be assigned to any digital or
// analog pins...but we'll use the analog pins as this allows us to
// double up the pins with the touch screen (see the TFT paint example).
#define LCD_CS A3 // Chip Select goes to Analog 3
#define LCD_CD A2 // Command/Data goes to Analog 2
#define LCD_WR A1 // LCD Write goes to Analog 1
#define LCD_RD A0 // LCD Read goes to Analog 0

#define LCD_RESET A4 // Can alternately just connect to Arduino's reset pin

// When using the BREAKOUT BOARD only, use these 8 data lines to the LCD:
// For the Arduino Uno, Duemilanove, Diecimila, etc.:
//   D0 connects to digital pin 8  (Notice these are
//   D1 connects to digital pin 9   NOT in order!)
//   D2 connects to digital pin 2
//   D3 connects to digital pin 3
//   D4 connects to digital pin 4
//   D5 connects to digital pin 5
//   D6 connects to digital pin 6
//   D7 connects to digital pin 7
// For the Arduino Mega, use digital pins 22 through 29
// (on the 2-row header at the end of the board).

// Assign human-readable names to some common 16-bit color values:
#define	BLACK   0x0000
#define	BLUE    0x001F
#define	RED     0xF800
#define	GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
// If using the shield, all control and data lines are fixed, and
// a simpler declaration can optionally be used:
// Adafruit_TFTLCD tft;

int PowerSensor = 0; //pin de entrada de pulsos medidor eléctrico
int Consigna=2300; //Vatios sobre los que queremos controlar los minutos en los que lo superamos para saber si merece la pena la bajada de potencia
float PulsosKW = 1000; //IMPORTANTE DEFINIR AQUÍ los que correspondan a tu aparato; pulsos por KW
//(Con un sensor de 1000 máximo vamos a tener 5 pulsos/seg. para un consumo de 5.000W)
//Es decir, van a pasar máximo 170 milisegundos entre pulsos (200-30 que dura)
//Energía: 1000 imp = 1 KWh -> 1 imp = 1 Wh; 
//long Intervalo_calculo = 10; //Segundos entre cálculos (Recomendado + de 3 segundos)
unsigned long Horas[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; //Matriz para guardar los pulsos según la hora
long millisAnt = 0; //Milisegundos para comprobar tiempo pasado
long millisPrevious=0; //Para saber el tiempo transcurrido desde el último pulso
float Tiempo_Trans=0; //Guardamos los ms entre cada pulso detectado
long millisEEPROM=0; //Salvado de Kwh consumidos en EEPROM
long millisPant=0; //Guardamos tiempo de intervalo pantalla completa
long millisRTC=0; //Actualizar reloj
boolean Pulso = false; //Detectado pulso
boolean NoPulso = false; //Detectado que no hubo pulso despuÃ©s de un pulso
unsigned long PulsosDia =0; //Contador total KWh
unsigned long PulsosNoche =0;
long Vatios=0; //Cálculo vatios
long VatiosAnt=0;
long MaxVatios=0; //pico consumo vatios
unsigned long TimeMax=0; //Ms con vatios >2300
long TimePrevious=0; //Control de tiempo de dibujado de pantalla
long TimeFinal=0;

void setup() {
  Serial.begin(9600);

//Descomentar las lÃ­neas siguientes para sincronizar tiempo por el Serial
//  if(Serial.available()) 
//  {
//     time_t t = processSyncMessage();
//     if(t >0)
//     {
//        RTC.set(t);   // set the RTC and the system time to the received value
//        setTime(t);          
//     }
//  }
//   digitalClockDisplay();  
//   delay(1000);
//}

  //sync internal time to the RTC
  setSyncProvider(RTC.get);   // the function to get the time from the RTC
  Serial.println();
  if(timeStatus()!= timeSet) 
     Serial.println("Unable to sync with the RTC");
  else
     Serial.println("RTC has set the system time");
  Wire.begin();
  //RTC.begin();
  //Si quitamos el comentario de la linea siguiente, se ajusta la hora y la fecha con la del ordenador
  //RTC.adjust(DateTime(__DATE__, __TIME__));
  Serial.println(F("Arduino Working OK"));

#ifdef USE_ADAFRUIT_SHIELD_PINOUT
  Serial.println(F("Using Adafruit 2.8\" TFT Arduino Shield Pinout"));
#else
  Serial.println(F("Using Adafruit 2.8\" TFT Breakout Board Pinout"));
#endif

  Serial.print("TFT size is "); Serial.print(tft.width()); Serial.print("x"); Serial.println(tft.height());
  tft.reset();

  uint16_t identifier = tft.readID();

  //Mandamos por el serial el ID por si hubiera algún problema con la pantalla
  if(identifier == 0x9325) { 
    Serial.println(F("Found ILI9325 LCD driver"));
  } else if(identifier == 0x9327) {
    Serial.println(F("Found ILI9327 LCD driver"));
  } else if(identifier == 0x9328) {
    Serial.println(F("Found ILI9328 LCD driver"));
  } else if(identifier == 0x7575) {
    Serial.println(F("Found HX8347G LCD driver"));
  } else if(identifier == 0x9341) {
    Serial.println(F("Found ILI9341 LCD driver"));
  } else if(identifier == 0x8357) {
    Serial.println(F("Found HX8357D LCD driver"));
  } else if(identifier == 0x0154) {
    Serial.println(F("Found S6D0154 LCD driver"));
  } else {
    Serial.print(F("Unknown LCD driver chip: "));
    Serial.println(identifier, HEX);
  }
  tft.begin(identifier);
  
  pinMode(PowerSensor, INPUT);
  
  //Cogemos los valores de pulsos salvados
   for(int i=0; i<24; i++) {               
     Horas[i]=EEPROMReadlong(i*4);
      }
   TimeMax=EEPROMReadlong(200);
   MaxVatios=EEPROMReadlong(204);
}

void loop() {
  //Descomentar las siguientes lÃ­neas para resetear la la eeprom que se usa en el programa
  //rellenamos de 0 los datos de EEPROM con los pulsos
  //for(int i=0; i<24; i++) {               
  //   EEPROMWritelong(i*4,0);
  //    }
  //EEPROMWritelong(200,0);
  //EEPROMWritelong(204,0);
  //Serial.println("Borrado de EEPROM terminado");
  //while(1) {delay(500);} //bucle infinito para borrarlo sÃ³lo una vez

  time_t t = now(); //Cogemos la hora
  int sensorState = digitalRead(PowerSensor);
  
  if (sensorState == 0) //Hay pocos pulsos por segundo, y cada uno dura >=30 mseg; lo importante es "capturarlos"
    {
      if (Pulso) { //Si se detectÃ³ pulso previamente, se contabiliza y se muestra WATTS consumo en pantalla
        //En esta operaciÃ³n tarda 29 ms en el Arduino UNO;
        Tiempo_Trans=millis()-millisPrevious;
        millisPrevious=millis();
        Pulso=false;
        //Guardamos el pulso en la hora correspondiente
        Horas[hour(t)]=Horas[hour(t)]+1;
        //3600 segundos=1 KWh = 1000 pulsos 
        //Sacamos los pulsos por segundo que hemos tenido y sacamos los W
        Vatios=((3600/PulsosKW)/(Tiempo_Trans/1000))*1000; //Todas las variables utilizadas en el cÃ¡lculo deben ser float para exactitud
        if (MaxVatios<Vatios) {//Guardamos mÃ¡ximo
          MaxVatios=Vatios; 
        }
        if (Vatios>=Consigna){//Guardamos el tiempo durante el cual los Vatios superan los vatios que queremos controlar (bajada de potencia)
          TimeMax=TimeMax+(Tiempo_Trans);
        } 
        //Cada vez que hay un pulso se actualiza sÃ³lo los Vatios/hora para acelerar el dibujado; asÃ­ sÃ³lo tarda 29 ms
        tft.setCursor(120, 0);
        tft.setTextColor(BLACK);  tft.setTextSize(3);
        tft.print(VatiosAnt);
        tft.print(" W");
        tft.setCursor(120,0);
        tft.setTextColor(YELLOW);
        tft.print(Vatios);
        tft.print(" W");
        VatiosAnt=Vatios;  
      }
    }
    else {
      Pulso=true; //Se marca detectado pulso
    }  
 
  //Refrescamos pantalla cada minuto pero sólo cuando hay pulsos cada 2 segundos o más, para evitar perder pulsos
  //Hay que tener en cuenta que escribir todo esto tarda 1,7 segundos en el UNO; prefiero no refrescar la pantalla antes que perder pulsos
  //He añadido contadores de tiempo para sacar el valor de la vez anterior y si el tiempo entre pulsos>tiempo que tarda en refrescar pantalla->refresca
  //A mi se me queda la pantalla en blanco cada cierto tiempo ¿? ni idea xq pasa, pero se arregla al refrescarse
  //También escribimos datos si acaba de encenderse (millis se resetea cada 50 días)
  //Y si no se cumple nada de eso, actualizar al menos cada 2 horas aunque perdamos algún pulso
  if (millis()-millisPant >= 60000 && Pulso && (Tiempo_Trans>TimeFinal-TimePrevious) or millis()<2000 or (millis()-millisPant) >=7200000) 
  {
    TimePrevious=millis();//Comienzo contador tiempo  
    millisPant=millis();
    tft.reset(); //Reseteamos la pantalla; lo hago cada minuto porque a veces se me quedaba en blanco
    uint16_t identifier = tft.readID(); //Leemos el identificador de pantalla, en mi caso 9325
    Serial.print("Display ID: ");
    Serial.println(identifier);
    tft.begin(identifier); //Inicializamos la pantalla
    tft.setRotation(1); //Girada la pantalla 90Âº para ponerla horizontal   
    tft.fillScreen(BLACK); //Es muy lento
    tft.setCursor(0, 0);
    tft.setTextColor(YELLOW);  tft.setTextSize(3);
    tft.print("WATTS:");
    tft.setCursor(120, 0); //Establecemos posiciÃ³n escritura Watts
    tft.print(Vatios);
    VatiosAnt=Vatios;
    tft.println(" W");
    //Calculamos PulsosDia y Noche
    //POR HACER: Cambiar el programa para que calcule consumo segÃºn horario verano teniendo en cuenta las fechas del reloj
    //De momento sÃ³lo cuenta los pulsos segÃºn las horas y calcula KWh dÃ­a y Noche
    PulsosNoche=0; //Iniciar variables
    PulsosDia=0;
    for(int i=0; i<24; i++) { 
      if (i>21 or i<12) { //A partir de las 22:00 hasta las 12:00 horario invierno
      PulsosNoche=PulsosNoche+Horas[i];
    }
      else {
      PulsosDia=PulsosDia+Horas[i];
      }
    }
    //Mostramos total dia y noche
    tft.setTextColor(MAGENTA);
    tft.print("WATTS MAX: ");
    tft.println(MaxVatios);    
    tft.print("TOTAL DIA: ");
    tft.print(PulsosDia/PulsosKW,1);//Indicamos Kw diarios con 1 decimal
    tft.println(" KWh");
    tft.print("TOT NOCHE: ");
    tft.print(PulsosNoche/PulsosKW,1);
    tft.println(" KWh");
    //Mostramos minutos durante los que se ha superado la consigna
    tft.setTextColor(WHITE);
    tft.setTextSize(2);
    tft.print("Minutos>2300Wh: ");
    tft.println(TimeMax/60000.1);//Con 1 decimal
    //Imprimimos en pantalla KW por cada hora para mÃ¡s info
    tft.setTextColor(CYAN);
    for(int i=0; i<24; i++) {               
     tft.print(i); 
     tft.print(":"); 
     tft.print(Horas[i]/PulsosKW,1); 
     tft.print(" ");
     if (i==3 or i==7 or i==11 or i==15 or i==19 or i==23){
      tft.println(); 
       }
     }
    //Mostramos fecha y hora
    tft.setTextColor(GREEN);
    tft.print(day(t));
    tft.print(+ "/") ;
    tft.print(month(t));
    tft.print(+ "/") ;
    tft.print(year(t)); 
    tft.print( " ") ;
    tft.print(hour(t));  
    tft.print(+ ":") ;
    tft.println(minute(t));
    //tft.print(":") ;
    //tft.println(second(t));
    TimeFinal=millis(); //Final contador tiempo
  }
  
  //Cada media hora salvamos a la EEPROM los datos que han cambiado (no hacerlo mÃ¡s frecuente para prevenir el envejecimiento prematuro de la FLASH)
  if (millis()-millisAnt>=1800000) { 
    for(int i=0; i<24; i++) {               
     if (EEPROMReadlong(i*4)!=Horas[i]) { //comprobamos si el valor ha cambiado; mÃºltiplos de 4 para almacenar el valor
        EEPROMWritelong(i*4,Horas[i]); //guardamos el valor de consumo diario
       }
      }
     if (EEPROMReadlong(200)!=TimeMax) { //Guardamos valor de tiempo en ms superando 2300W
        EEPROMWritelong(200,TimeMax);
       }
     if (EEPROMReadlong(204)!=MaxVatios) { //Guardamos valor de vatios máximo
        EEPROMWritelong(204,MaxVatios);
       }
     tft.setTextColor(GREEN);
     tft.setTextSize(1);
     tft.setCursor(0,230);
     tft.print("Data saved ");
     tft.print(day(t));
     tft.print(+ "/") ;
     tft.print(month(t));
     tft.print(+ "/") ;
     tft.print(year(t)); 
     tft.print( " ") ;
     tft.print(hour(t));  
     tft.print(+ ":") ;
     tft.println(minute(t));

   }
  
  delay(20);
}
//RUTINAS
//This function will write a 4 byte (32bit) long to the eeprom at
//the specified address to address + 3.
void EEPROMWritelong(int address, long value)
      {
      //Decomposition from a long to 4 bytes by using bitshift.
      //One = Most significant -> Four = Least significant byte
      byte four = (value & 0xFF);
      byte three = ((value >> 8) & 0xFF);
      byte two = ((value >> 16) & 0xFF);
      byte one = ((value >> 24) & 0xFF);

      //Write the 4 bytes into the eeprom memory.
      EEPROM.write(address, four);
      EEPROM.write(address + 1, three);
      EEPROM.write(address + 2, two);
      EEPROM.write(address + 3, one);
      }
      
long EEPROMReadlong(long address)
      {
      //Read the 4 bytes from the eeprom memory.
      long four = EEPROM.read(address);
      long three = EEPROM.read(address + 1);
      long two = EEPROM.read(address + 2);
      long one = EEPROM.read(address + 3);

      //Return the recomposed long by using bitshift.
      return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
      }
